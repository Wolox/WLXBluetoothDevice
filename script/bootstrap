#!/bin/bash

set -e

install_homebrew ()
{
  if [ -z $GITHUB_ACCESS_TOKEN ]
  then
    export HOMEBREW_GITHUB_API_TOKEN=$GITHUB_ACCESS_TOKEN
  fi

  if type brew > /dev/null
  then
    echo "    ✔ brew is already installed"
    echo ""
    echo " → Updating homebrew formulas"
    brew update > /dev/null
    echo "    ✔ formulas updated"
  else
    command -v ruby >/dev/null 2>&1 || { echo >&2 "Error: Some ruby of version is required to install homebrew. Aborting"; exit 1; }
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

# param $1 formula name
# param $2 [optional] tap path
brew_install ()
{
  formula_version=`brew list --versions $1`
  if [ -z "$formula_version" ]
  then
    if [ -z $2 ]
    then
      formula_name=$1
    else
      formula_name="$2/$1"
    fi
    echo ""
    echo " → Installing brew formula $formula_name"
    brew install -v $formula_name > /dev/null 2>&1

    # Extract version
    regexp="^.*([0-9]\.[0-9]\.[0-9]).*$"
    installed_version=""
    eval "output=\"$(brew info $1)\""
    if [[ $output =~ $regexp ]]
    then
      installed_version=${BASH_REMATCH[1]}
    fi

    echo "    ✔ $formula_name $installed_version has been installed"
  else
    echo "    ✔ $1 is already installed"
  fi
}

print_gem_install_cmd ()
{
  regexp="gem ['\"]([a-zA-Z0-9_-]+)['\"](,.*)?"
  gems=""
  while read -r line
  do
    if [[ $line =~ $regexp ]]
    then
      gems="$gems ${BASH_REMATCH[1]}"
    fi
  done < Gemfile

  echo ""
  echo "  $> 'sudo gem install$gems'"
  echo ""
}

bundle_install ()
{
  if type bundle > /dev/null
  then
    bundle install
  else
    # TODO ask user if he/she wants to the script to try to install
    # rbenv, ruby and bundler.
    printf "\033[1;33m⚠ WARNING: Ruby gems in Gemfile could not be installed because 'bundler' is not available.\n" \
           "You should install rbenv or rvm and bundler" \
           "or try to install the gems globally by running the following command:"
    print_gem_install_cmd
    printf "\033[0m"
  fi
}

# Download .framework that cannot be installed with Carthage
script/download_frameworks

# Install homebrew formulas
echo ""
echo " → Installing dependencies"
echo ""
install_homebrew
brew_install "xcode-coveralls" "macmade/tap"
if [ -z $GITHUB_ACCESS_TOKEN ]
then
  brew_install "carthage"
else
  echo ""
  echo " → Installing custom version of Carthage"
  sudo installer -pkg script/Carthage.pkg -target / > /dev/null
  echo "    ✔ Custom Carthage installed"
fi

if [ -f Gemfile ]
then
  echo ""
  echo " → Installing gems"
  echo ""
  bundle_install
fi

echo ""
echo " → Bootstrapping Carthage"
echo ""
if [ -z $GITHUB_ACCESS_TOKEN ]
then
  time carthage bootstrap --platform ios
else
  time carthage bootstrap --platform ios --github-access-token $GITHUB_ACCESS_TOKEN
fi
