#!/bin/bash

set -e

install_homebrew ()
{
  if [ -z $GITHUB_ACCESS_TOKEN ]
  then
    export HOMEBREW_GITHUB_API_TOKEN=$GITHUB_ACCESS_TOKEN
  fi

  if type brew > /dev/null
  then
    echo "    ✔ brew is already installed"

    if [ -z "$SKIP_BREW_FORMULAS_UPDATE" ]
    then
      echo ""
      echo " → Updating homebrew formulas"
      brew update > /dev/null || brew update > /dev/null
      echo "    ✔ formulas updated"
    fi
  else
    command -v ruby >/dev/null 2>&1 || { echo >&2 "Error: Some ruby of version is required to install homebrew. Aborting"; exit 1; }
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

# param $1 formula name
# param $2 [optional] tap path
brew_install ()
{
  formula_version=`brew list --versions $1`
  if [ -z "$formula_version" ]
  then
    if [ -z $2 ]
    then
      formula_name=$1
    else
      formula_name="$2/$1"
    fi
    echo ""
    echo " → Installing brew formula $formula_name"
    brew install -v $formula_name > /dev/null 2>&1

    # Extract version
    regexp="^.*([0-9]\.[0-9]\.[0-9]).*$"
    installed_version=""
    eval "output=\"$(brew info $1)\""
    if [[ $output =~ $regexp ]]
    then
      installed_version=${BASH_REMATCH[1]}
    fi

    echo "    ✔ $formula_name $installed_version has been installed"
  else
    echo "    ✔ $1 is already installed"
  fi
}

print_gem_install_cmd ()
{
  regexp="gem ['\"]([a-zA-Z0-9_-]+)['\"](,.*)?"
  gems=""
  while read -r line
  do
    if [[ $line =~ $regexp ]]
    then
      gems="$gems ${BASH_REMATCH[1]}"
    fi
  done < Gemfile

  echo ""
  echo "  $> 'sudo gem install$gems'"
  echo ""
}

bundle_install ()
{
  echo ""
  echo " → Installing gems"
  echo ""
  if type bundle > /dev/null
  then
    bundle install
  else
    # TODO ask user if he/she wants the script to try to install
    # rbenv, ruby and bundler.
    printf "\033[1;33m⚠ WARNING: Ruby gems in Gemfile could not be installed because 'bundler' is not available.\n" \
           "You should install rbenv or rvm and bundler" \
           "or try to install the gems globally by running the following command:"
    print_gem_install_cmd
    printf "\033[0m"
    exit 1
  fi
}

install_git_hooks ()
{
  if [ ! -z "$INSTALL_GITHOOKS" ]
  then
    echo ""
    echo " → Installing git hooks"
    echo ""
    for hook in script/git_hooks/*
    do
      cp $hook .git/hooks
      echo "    ✔ $hook successfully installed"
    done
    echo ""
  fi
}

bootstrap_carthage ()
{
  echo ""
  echo " → Bootstrapping Carthage"
  echo ""
  carthage_cmd="carthage bootstrap --platform $CARTHAGE_BUILD_PLATFORM"

  if [ "$USE_SSH" == "true" ]
  then
    carthage_cmd="$carthage_cmd --use-ssh"
  fi

  if [ "$USE_SUBMODULES" == "true" ]
  then
    carthage_cmd="$carthage_cmd --use-submodules --no-build"
  fi

  if [ "$CARTHAGE_NO_USE_BINARIES" == "true" ]
  then
    carthage_cmd="$carthage_cmd --no-use-binaries"
  fi

  if [ -z $DISABLE_CARTHAGE_CACHE ] && type bundle > /dev/null && bundle show carthage_cache > /dev/null && ([ ! -z $DISABLE_CARTHAGE_CACHE_CONFIG ] || [ -f .carthage_cache.yml ])
  then
    carthage_cache_cmd="carthage_cache"
    if [ ! -z $CARTHAGE_CACHE_BUCKET_NAME ]
    then
      carthage_cache_cmd="$carthage_cache_cmd -b $CARTHAGE_CACHE_BUCKET_NAME"
    fi
    carthage_cmd="(bundle exec $carthage_cache_cmd install || $carthage_cmd) && bundle exec $carthage_cache_cmd publish"
  fi

  carthage_cmd="time $carthage_cmd"
  if [ ! -z "$VERBOSE" ]
  then
    echo $carthage_cmd
  fi

  eval $carthage_cmd
}

bootstrap_cocoapods ()
{
  echo ""
  echo " → Bootstrapping Cocoapods"
  echo ""
  if type bundle > /dev/null && bundle show pod > /dev/null
  then
    bundle exec pod install
  else
    pod install
  fi
}

echo_submodule_name ()
{
  echo "  ✔ $name successfully initialized"
}

init_submodules ()
{
  echo ""
  echo " → Initializing submodules ..."
  echo ""
  git submodule update --quiet --init --recursive > /dev/null
  git submodule foreach --quiet echo_submodule_name
}

install_dependencies ()
{
  echo ""
  echo " → Installing dependencies"
  echo ""
  install_homebrew
  brew_install "xcode-coveralls" "macmade/tap"

  if [ -f script/script_hooks/bootstrap ] && [ -z $DISABLE_BOOTSTRAP_HOOKS ]
  then
    script/script_hooks/bootstrap
  fi
}

install_carthage ()
{
  source script/common/carthage

  if type carthage > /dev/null
  then
    echo ""
    echo " → Checking installed version of carthage"
    echo ""
    check_carthage_version
  else
    force_install_carthage
  fi

  if [ -z "$DISABLE_CARTHAGE_CACHE_CONFIG" ] && type bundle > /dev/null && bundle show carthage_cache > /dev/null && [ ! -f .carthage_cache.yml ]
  then
    bundle exec carthage_cache config
  fi
}

main ()
{
  source script/.env

  echo ""
  echo " Bootstrapping $PROJECT_NAME"
  echo ""

  install_git_hooks
  install_dependencies

  if [ -f Gemfile ]
  then
    bundle_install
  fi

  if [ -f Cartfile.resolved ]
  then
    install_carthage
    bootstrap_carthage
  fi

  if [ -f Podfile ]
  then
    bootstrap_cocoapods
  fi

  if [ -f .gitmodules ]
  then
    init_submodules
  fi

  open_file_name=""
  if [ -z "$XCODE_WORKSPACE" ]
  then
    open_file_name=$XCODE_PROJECT
  else
    open_file_name=$XCODE_WORKSPACE
  fi

  echo ""
  echo " $PROJECT_NAME successfully bootstrapped"
  echo ""
  echo " Usefull scripts:"
  echo ""
  echo "  * 'script/test' to run tests."
  echo "  * 'script/build' to build the project."
  echo "  * 'script/update' to update project's dependencies."
  echo ""
  echo " You can start hacking by executing:"
  echo ""
  echo "    open $open_file_name"
  echo ""
}

export -f init_submodules
export -f echo_submodule_name
export -f brew_install

main
